import React, { useEffect, useState } from "react"
import { Icon } from "../../icon"
import { OptionsItemProps } from "./OptionsItemProps"
import { has, is } from "../../../services/classify"
import shortid from "shortid"
import { OptionsItemVariant } from "../OptionsEnum"
import { Text, TextMarkup } from "../../text"
import { hashClass } from "../../../helpers"
import clsx from "clsx"
import { useTrilogyContext } from "../../../context"

/**
 * Options Item Component
 * @param id {string} Id for Options Item - Default id generated by default
 * @param className {string} Additionnal CSS Classes
 * @param variant {OptionsItemVariant} Variant for OptionsItem (ICON|MULTILINE)
 * @param iconName {IconName} Custom icon
 * @param description {String} Optional description for "multiline" label
 * @param disabled {boolean} Disabled Options Item
 * @param name {string} Options Item name
 * @param value {string} Value for options item
 * @param checked {boolean} Checked options item
 * @param label {string} Label for options item
 * @param readonly {boolean} readonly options item
 * @param onChange {onChange} onChange Event
 * @param onClick {onClick} onClick Event
 * @param children {React.ReactNode}
 */
const OptionsItem = ({
  id = shortid.generate(),
  className,
  disabled,
  variant,
  iconName,
  description,
  name,
  value,
  checked,
  label,
  readonly,
  onChange,
  onClick,
  testId,
  ...others
}: OptionsItemProps): JSX.Element => {
  const { styled } = useTrilogyContext()

  const classes = hashClass(
    styled,
    clsx(
      "field",
      variant && variant === OptionsItemVariant.ICON
        ? has(`${variant}`)
        : is(`${variant}`),
      className
    )
  )
  const [_checked, setChecked] = useState<boolean>(Boolean(checked) || false)
  const multilineClass = hashClass(
    styled,
    clsx(
      variant && variant == OptionsItemVariant.MULTILINE ? "is-descriptive" : ""
    )
  )

  useEffect(() => {
    if (!readonly) {
      setChecked(checked || false)
    }
  }, [readonly, checked])

  return (
    <div className={classes} {...others}>
      <div className={hashClass(styled, clsx("control"))}>
        <input
          type='radio'
          id={id}
          data-testid={testId}
          name={name}
          value={value}
          checked={readonly ? checked : _checked}
          onChange={(e: React.ChangeEvent) => {
            return e
          }}
          onClick={(e: React.MouseEvent) => {
            e.stopPropagation()
            const target = e.target as HTMLInputElement
            if (!readonly && target.checked !== undefined) {
              setChecked(target.checked)
            }
            target.value = value || ""
            if (onChange) {
              onChange({
                optionId: target.id,
                optionValue: target.value,
                optionName: target.name,
                optionChecked: target.checked,
              })
            }
            if (onClick) {
              onClick({
                optionId: target.id,
                optionValue: target.value,
                optionName: target.name,
                optionChecked: target.checked,
              })
            }
          }}
          disabled={disabled}
        />
        <label
          htmlFor={id}
          className={multilineClass}
        >
          {label}
          {variant && iconName && <Icon name={iconName} {...others} />}
          {variant &&
            variant == OptionsItemVariant.MULTILINE &&
            description && <Text markup={TextMarkup.SPAN}>{description}</Text>}
        </label>
      </div>
    </div>
  )
}

export default OptionsItem
