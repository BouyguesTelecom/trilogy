@use 'sass:math';

$columnWidth: calc((100% / (var(--ColumnFraction))) - ((((var(--ColumnFraction)) - 1) / (var(--ColumnFraction))) * var(--ColumnGap)));
$offsetWidth: calc((100% / (var(--offset))) - ((((var(--offset)) - 1) / (var(--offset))) * var(--ColumnGap)) + var(--ColumnGap));

$columnSize : (
  "1"     : math.div(12, 1),
  "2"     : math.div(12, 2),
  "3"     : math.div(12, 3),
  "4"     : math.div(12, 4),
  "5"     : math.div(12, 5),
  "6"     : math.div(12, 6),
  "7"     : math.div(12, 7),
  "8"     : math.div(12, 8),
  "9"     : math.div(12, 9),
  "10"    : math.div(12, 10),
  "11"    : math.div(12, 11),
  "12"    : math.div(12, 12),
  "full"  : math.div(12, 12),
  "half"  : math.div(12, 6)
);

$columnNumber : 12;
%flex-none {
  flex: none;
}


$gap :
  4px,
  8px,
  12px,
  16px,
  24px,
  32px,
  40px,
  48px,
  54px,
  62px
;

.columns{
  display: flex;
  --ColumnGap: 24px;

  %flex-none {
    flex: none;
  }

  @for $i from 1 through $columnNumber {
    &.has-#{$i}-cols > .column { @extend %flex-none; }
  }

  .column[class*="is-"]:not(.is-narrow){
    width:  #{$columnWidth};
  }



  &.has-1-cols > .column:not(.is-narrow),
  &.has-2-cols > .column:not(.is-narrow),
  &.has-3-cols > .column:not(.is-narrow),
  &.has-4-cols > .column:not(.is-narrow),
  &.has-5-cols > .column:not(.is-narrow),
  &.has-6-cols > .column:not(.is-narrow),
  &.has-7-cols > .column:not(.is-narrow),
  &.has-8-cols > .column:not(.is-narrow),
  &.has-9-cols > .column:not(.is-narrow),
  &.has-10-cols > .column:not(.is-narrow),
  &.has-11-cols > .column:not(.is-narrow),
  &.has-12-cols > .column:not(.is-narrow)
  {
    width:  #{$columnWidth};
  }

  @for $i from 1 through 12 {
    &.has-#{$i}-cols > .column{
      --ColumnFraction: #{$i};
      flex: none;
    }
  }

  @each $key, $value in $columnSize{
    > .column.is-#{$key} {
      flex: none;
      --ColumnFraction: #{$value};
    }

    .column.is-offset-#{$key} {
      --offset: #{$value};
      margin-left: $offsetWidth;
    }
  }

  @for $i from 1 through length($gap) {
    $item: nth($gap, $i);
    &.is-mobile.has-gap-#{$i} {
      gap: $item;
      .column {
        --ColumnGap: #{$item};
      }
    }

    @include tablet{
      &.has-gap-#{$i}:not(.is-desktop) {
        gap: $item;
        .column {
          --ColumnGap: #{$item};
        }
      }
    }

    @include desktop{
      &.has-gap-#{$i},
      &.has-gap-#{$i}-desktop {
        gap: $item;
        .column {
          --ColumnGap: #{$item};
        }
      }
    }

    @include widescreen{
      &.has-gap-#{$i}-widescreen {
        gap: $item;
        .column {
          --ColumnGap: #{$item};
        }
      }
    }

    @include fullhd{
      &.has-gap-#{$i}-fullhd {
        gap: $item;
        .column {
          --ColumnGap: #{$item};
        }
      }
    }

  }



  @include mobile{
    &.is-peek{
      padding-right: 15%;
    }
    @for $i from 0 through 12 {
      &.has-#{$i}-cols-mobile > .column{
        --ColumnFraction: #{$i};
        flex: none;
      }
    }

    @each $key, $value in $columnSize{
      & > .column.is-#{$key}-mobile {
        flex: none;
        --ColumnFraction: #{$value};
      }

      &.is-mobile > .column.is-offset-#{$key}-mobile {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include tablet{

    @for $i from 0 through 12 {
      &.has-#{$i}-cols-tablet > .column{
        --ColumnFraction: #{$i};
        flex: none;
      }
    }

    @each $key, $value in $columnSize{
      > .column.is-#{$key}-tablet {
        flex: none;
        --ColumnFraction: #{$value};
      }

      .column.is-offset-#{$key}-tablet {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include touch{

    @for $i from 0 through 12 {
      &.has-#{$i}-cols-touch > .column{
        --ColumnFraction: #{$i};
        flex: none;
      }
    }

    @each $key, $value in $columnSize{
      > .column.is-#{$key}-touch {
        flex: none;
        --ColumnFraction: #{$value};
      }

      > .column.is-offset-#{$key}-touch {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include desktop{

    @for $i from 0 through 12 {
      &.has-#{$i}-cols-desktop > .column{
        --ColumnFraction: #{$i};
        flex: none;
      }
    }

    @each $key, $value in $columnSize{
      > .column.is-#{$key}-desktop {
        flex: none;
        --ColumnFraction: #{$value};
      }

      > .column.is-offset-#{$key}-desktop {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include widescreen{

    @for $i from 0 through 12 {
      &.has-#{$i}-cols-widescreen > .column{
        --ColumnFraction: #{$i};
        flex: none;
      }
    }

    @each $key, $value in $columnSize{
      > .column.is-#{$key}-widescreen{
        flex: none;
        --ColumnFraction: #{$value};
      }

      > .is-offset-#{$key}-widescreen {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include fullhd{

    @for $i from 0 through 12 {
      &.has-#{$i}-cols-fullhd > .column{
        --ColumnFraction: #{$i};
        flex: none;
      }
    }

    @each $key, $value in $columnSize{
      > .column.is-#{$key}-fullhd{
        flex: none;
        --ColumnFraction: #{$value};
      }

      > .column.is-offset-#{$key}-fullhd {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include mobile {
    --ColumnGap: 16px;
    &:not(.is-mobile){
      flex-direction: column;
      > .column,
      > .column[class*="is-"]{
        --ColumnFraction: 1;
      }
    }
  }
  @include tablet-only{
    &.is-desktop{
      flex-direction: column;
      > .column,
      > .column[class*="is-"]{
        --ColumnFraction: 1;
      }
    }
  }



}



.column {
  display: block;
  flex-basis: 0;
  flex-grow: 1;
  flex-shrink: 1;
  &.is-vcentered {
    align-self: center;
  }


  @include mobile {
    &.is-narrow-mobile {
      flex: none;
    }
  }

  @include tablet {
    &.is-narrow,
    &.is-narrow-tablet {
      flex: none;
    }

  }

  @include touch {
    &.is-narrow-touch {
      flex: none;
    }
  }

  @include desktop {
    &.is-narrow-desktop {
      flex: none;
    }
  }

  @include widescreen {
    &.is-narrow-widescreen {
      flex: none;
    }

  }

  @include fullhd {
    &.is-narrow-fullhd {
      flex: none;
    }
  }
}

.columns {
  gap : 24px;

  &.is-scrollable {
    position: relative;
    padding-bottom: 8px;
    flex-wrap: nowrap;
    overflow-x: auto;
    display: flex !important;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    margin: -8px;
    padding: 8px;
    scroll-padding: 8px;

    >.column {
      scroll-snap-align: start;
      &:last-child{
        scroll-snap-align: end;
      }
    }
    &:not(.has-scrollbar){
      &::-webkit-scrollbar {
        scrollbar-width: none;
      }
    }
    &.has-scrollbar{
      &::-webkit-scrollbar {
        height: 8px;
      }

      &::-webkit-scrollbar-track {
        background-color: getColor('neutral');
        border-radius: 8px;
        margin: 0 8px;
      }

      &::-webkit-scrollbar-thumb {
        background-color: getColor('main-fade');
        border-radius: var(--radius);
      }
    }
  }

  &:not(:last-child) {
    margin-bottom: $column-gap-tablet-desktop;
  }

  @include mobile {
    gap : 16px;

  }

  // Modifiers
  &.is-centered {
    justify-content: center;
  }

  &.is-gapless {
    gap: 0;
    --ColumnGap: 0px; // must be px because is used in calc.
  }

  &.is-mobile {
    display: flex;
  }

  &.is-multiline {
    flex-wrap: wrap;
  }

  &.is-vcentered {
    align-items: center;
  }

  &.is-fullheight {
    height: calc(100% + #{$column-gap-tablet-desktop * 2});
  }

  &.is-inverted-mobile {
    @include mobile {
      flex-direction: column-reverse;
      display: flex;
      align-items: stretch;
    }
  }

  // Responsiveness
  @include tablet {
    &:not(.is-desktop) {
      flex-direction: row;
    }
  }

  @include desktop {
    // Modifiers
    &.is-desktop {
      flex-direction: row;
    }
  }
  @include mobile{
    &.is-fullbleed {
      width: 100vw !important;
      margin-left: 50%;
      transform: translateX(-50%);
      padding: 24px;
    }
    &.is-fullbleed {
      scroll-padding: 24px;
    }
    &.is-fullbleed.is-scrollable .column{
      scroll-snap-align: start;
      scroll-padding: 24px;
    }
    .scroll-view{
      overflow: inherit;
    }
  }
}
:root{
  --slider-size:min(100%, 1348px);
}
