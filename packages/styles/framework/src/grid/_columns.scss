@use "sass:list";
@use "../base/color";
@use "../utilities/initial-variables";
@use "../utilities/mixins";

@use 'sass:math';

$columnWidth: calc((100% / (var(--ColumnFraction))) - ((((var(--ColumnFraction)) - 1) / (var(--ColumnFraction))) * var(--ColumnGap)));
$offsetWidth: calc((100% / (var(--offset))) - ((((var(--offset)) - 1) / (var(--offset))) * var(--ColumnGap)) + var(--ColumnGap));

$columnSize: (
  "1" : math.div(12, 1),
  "2" : math.div(12, 2),
  "3" : math.div(12, 3),
  "4" : math.div(12, 4),
  "5" : math.div(12, 5),
  "6" : math.div(12, 6),
  "7" : math.div(12, 7),
  "8" : math.div(12, 8),
  "9" : math.div(12, 9),
  "10" : math.div(12, 10),
  "11" : math.div(12, 11),
  "12" : math.div(12, 12),
  "full" : math.div(12, 12),
  "half" : math.div(12, 6)
);

$columnNumber: 12;
%flex-none {
  flex: none;
}


initial-variables.$gap: 4px,
8px,
12px,
16px,
24px,
32px,
40px,
48px,
54px,
62px;

.columns {
  display: flex;
  --ColumnGap: 24px;

  %flex-none {
    flex: none;
  }

  .column[class*="is-"]:not(.is-narrow) {
    width: #{$columnWidth};
  }

  @each $key, $value in $columnSize {
    > .column.is-#{$key} {
      flex: none;
      --ColumnFraction: #{$value};
    }
  }

  @for $i from 1 through list.length(initial-variables.$gap) {
    $item: list.nth(initial-variables.$gap, $i);
    &.is-mobile.has-gap-#{$i} {
      gap: $item;

      > .column {
        --ColumnGap: #{$item};
      }
    }

    @include mixins.tablet {
      &.has-gap-#{$i}:not(.is-desktop) {
        gap: $item;

        > .column {
          --ColumnGap: #{$item};
        }
      }
    }

    @include mixins.desktop {
      &.has-gap-#{$i},
      &.has-gap-#{$i}-desktop {
        gap: $item;

        > .column {
          --ColumnGap: #{$item};
        }
      }
    }

    @include mixins.widescreen {
      &.has-gap-#{$i}-widescreen {
        gap: $item;

        > .column {
          --ColumnGap: #{$item};
        }
      }
    }

    @include mixins.fullhd {
      &.has-gap-#{$i}-fullhd {
        gap: $item;

        > .column {
          --ColumnGap: #{$item};
        }
      }
    }

  }


  @include mixins.mobile {
    &.is-peek {
      padding-right: 15%;
    }

    @each $key, $value in $columnSize {
      & > .column.is-#{$key}-mobile {
        flex: none;
        --ColumnFraction: #{$value};
      }

      &.is-mobile > .column.is-offset-#{$key}-mobile {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }
  }

  @include mixins.tablet {
    @each $key, $value in $columnSize {
      > .column.is-#{$key}-tablet {
        flex: none;
        --ColumnFraction: #{$value};
      }

      .column.is-offset-#{$key}-tablet {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }

      .column.is-offset-#{$key} {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

    &.is-aligned-start {
      align-items: start !important;
    }

    &.is-aligned-center {
      align-items: center !important;
    }

    &.is-aligned-end {
      align-items: end !important;
    }
  }

  @include mixins.touch {
    @each $key, $value in $columnSize {
      > .column.is-#{$key}-touch {
        flex: none;
        --ColumnFraction: #{$value};
      }

      > .column.is-offset-#{$key}-touch {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include mixins.desktop {
    @each $key, $value in $columnSize {
      > .column.is-#{$key}-desktop {
        flex: none;
        --ColumnFraction: #{$value};
      }

      > .column.is-offset-#{$key}-desktop {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include mixins.widescreen {
    @each $key, $value in $columnSize {
      > .column.is-#{$key}-widescreen {
        flex: none;
        --ColumnFraction: #{$value};
      }

      > .is-offset-#{$key}-widescreen {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include mixins.fullhd {
    @each $key, $value in $columnSize {
      > .column.is-#{$key}-fullhd {
        flex: none;
        --ColumnFraction: #{$value};
      }

      > .column.is-offset-#{$key}-fullhd {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

  }

  @include mixins.mobile {
    --ColumnGap: 16px;
    &:not(.is-mobile) {
      flex-direction: column;

      > .column,
      > .column[class*="is-"] {
        --ColumnFraction: 1;
      }
    }

    &.is-aligned-start {
      align-items: unset !important;
    }

    &.is-aligned-center {
      align-items: unset !important;
    }

    &.is-aligned-end {
      align-items: unset !important;
    }
  }

  @include mixins.tablet-only {
    &.is-desktop {
      flex-direction: column;

      > .column,
      > .column[class*="is-"] {
        --ColumnFraction: 1;
      }
    }
  }
}

.column {
  display: block;
  flex-basis: 0;
  flex-grow: 1;
  flex-shrink: 1;

  @include mixins.mobile {
    &.is-narrow-mobile {
      flex: none;
    }
  }

  @include mixins.tablet {
    &.is-narrow,
    &.is-narrow-tablet {
      flex: none;
    }

    &.is-aligned-start {
      align-self: start !important;
    }

    &.is-aligned-center {
      align-self: center !important;
    }

    &.is-aligned-end {
      align-self: end !important;
    }
  }

  @include mixins.touch {
    &.is-narrow-touch {
      flex: none;
    }
  }

  @include mixins.desktop {
    &.is-narrow-desktop {
      flex: none;
    }
  }

  @include mixins.widescreen {
    &.is-narrow-widescreen {
      flex: none;
    }

  }

  @include mixins.fullhd {
    &.is-narrow-fullhd {
      flex: none;
    }
  }
}

.columns {
  gap: 24px;

  &.is-scrollable {
    position: relative;
    padding-bottom: 8px;
    flex-wrap: nowrap;
    overflow-x: auto;
    display: flex !important;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    margin: -8px;
    padding: 8px;
    scroll-padding: 8px;

    > .column {
      scroll-snap-align: center;

      &:last-child {
        scroll-snap-align: end;
      }
    }

    &:not(.has-scrollbar) {
      &::-webkit-scrollbar {
        scrollbar-width: none;
      }
    }

    &.has-scrollbar {
      &::-webkit-scrollbar {
        height: 8px;
      }

      &::-webkit-scrollbar-track {
        background-color: color.getColor('neutral');
        border-radius: 8px;
        margin: 0 8px;
      }

      &::-webkit-scrollbar-thumb {
        background-color: color.getColor('main-fade');
        border-radius: var(--radius);
      }
    }
  }

  @include mixins.mobile {
    gap: 16px;
  }

  // Modifiers
  &.is-centered {
    justify-content: center;
  }

  &.is-gapless {
    gap: 0;
  }

  &.is-mobile {
    display: flex;

    &.is-aligned-start {
      align-items: start !important;
    }

    &.is-aligned-center {
      align-items: center !important;
    }

    &.is-aligned-end {
      align-items: end !important;
    }

    @each $key, $value in $columnSize {
      .column.is-offset-#{$key} {
        --offset: #{$value};
        margin-left: $offsetWidth;
      }
    }

    .column {
      &.is-narrow {
        flex: none;
      }

      &.is-aligned-start {
        align-self: start !important;
      }

      &.is-aligned-center {
        align-self: center !important;
      }

      &.is-aligned-end {
        align-self: end !important;
      }
    }
  }

  &.is-multiline {
    flex-wrap: wrap;
  }

  &.is-vcentered {
    align-items: center;
  }

  &.is-inverted-mobile {
    @include mixins.mobile {
      flex-direction: column-reverse;
      display: flex;
      align-items: stretch;
    }
  }

  // Responsiveness
  @include mixins.tablet {
    &:not(.is-desktop) {
      flex-direction: row;
    }
  }

  @include mixins.desktop {
    // Modifiers
    &.is-desktop {
      flex-direction: row;
    }
  }
  @include mixins.mobile {
    &.is-fullbleed {
      width: 100vw !important;
      margin-left: 50%;
      transform: translateX(-50%);
      padding: 24px;
    }
    &.is-fullbleed {
      scroll-padding: 16px;
    }
    &.is-fullbleed.is-scrollable > .column {
      scroll-snap-align: center;
      scroll-padding: 16px;
    }
    .scroll-view {
      overflow: inherit;
    }
  }
}

:root {
  --slider-size: min(100%, 1348px);
}
