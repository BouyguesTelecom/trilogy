@use "sass:map";

@function getColor( $name ) {
  @if str-slice($name, 0, 3) == 'bg-' {
    $submane: str-slice($name, 4);
  @return getBGColor( $submane );
  }
  @return var(--color-#{nth(map-get($colors,$name),1)})
}

@function getColorValue( $name ) {
  @return #{nth(map-get($colors,$name),2)}
}

@function getBGColorValue( $name ) {
  @return #{nth(map-get($colors,$name),4)}
}

@function getColorBrandName( $name ) {
  @return #{nth(map-get($colors,$name),1)}
}

@function getBGColor( $name ) {
  @return var(--color-bg-#{nth(map-get($colors,$name),1)})
}

:root {
  @each $name, $color in $colors {
    --color-#{nth($color,1)}: #{nth($color,2)};
    --color-bg-#{nth($color,1)}: #{nth($color,4)};
  }
}

@function invertColor ($colorName, $context:'') {
  $invertcolormap: ('tertiary': 'grey-dark', 'grey-dark': 'grey-light', 'grey-light': 'grey-dark');
  $defaultInvert: white;

  @if ($context == 'dark') {
    $invertcolormap: ('tertiary':'var(--color-success)');
    $defaultInvert: black;
  }

  @if ($context == 'accordion') {
    $defaultInvert: 'grey-lighter'
  }

  $result: map.get($invertcolormap, $colorName);
  @if ($result) {
    @return $result
  }
  @return $defaultInvert
}
