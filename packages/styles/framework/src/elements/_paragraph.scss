@use "sass:list";
@use "../base/color";
@use "../utilities/derived-variables";
@use "../utilities/initial-variables";
@use "../utilities/mixins";

$text-levels: (
    (initial-variables.$text-16, initial-variables.$text-20, initial-variables.$text-16),
    (initial-variables.$text-14, initial-variables.$text-18, initial-variables.$text-16),
    (initial-variables.$text-12, initial-variables.$text-15, initial-variables.$text-16),
    (initial-variables.$text-10, initial-variables.$text-12, initial-variables.$text-16)
);
$text-levels-mobile: (
    (initial-variables.$text-16, initial-variables.$text-20, initial-variables.$text-8),
    (initial-variables.$text-14, initial-variables.$text-18, initial-variables.$text-8),
    (initial-variables.$text-12, initial-variables.$text-15, initial-variables.$text-8),
    (initial-variables.$text-10, initial-variables.$text-12, initial-variables.$text-8)
);


.text {
  @each $text-level in $text-levels {
    $i: list.index($text-levels, $text-level);
    $font-size: list.nth($text-level, 1);
    $line-height: list.nth($text-level, 2);

    &.is-level-#{$i} {
      font-size: $font-size;
      line-height: $line-height;
      font-family: derived-variables.$family-primary;
    }
  }

  &.is-inverted {
    color: color.getColor('background');
  }

  @include mixins.mobile {
    @each $text-level-mobile in $text-levels-mobile {
      $i: list.index($text-levels-mobile, $text-level-mobile);
    }
  }

  &.is-wrapped {
    word-break: break-word;
  }

  &.bold {
    font-weight: initial-variables.$weight-bold;
  }
}

.span {
  font-style: inherit;
  font-weight: inherit;
}

.strong {
  color: inherit;
  font-weight: initial-variables.$weight-bold;
}

.sup {
  line-height: 0;
  position: relative;
  vertical-align: baseline;
  top: -0.4em;
  font-size: 0.7em;
}

.small {
  font-size: 0.875em;
}
