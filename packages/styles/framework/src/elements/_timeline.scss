@use 'sass:math';

$timeline-marker-icon-size: 2.85em !default;
$timeline-marker-size: 0.8em !default;
$timeline-marker-border-size: 0.1em !default;
$timeline-line-width: 0.1em !default;
$timeline-line-style: solid !default;
$timeline-content-padding: 1em 0 0 16px !default;
$timeline-rtl-content-padding: 1em 2em 0 0 !default;
$timeline-icon-size: $size-small !default;
$timeline-header-width: 4em !default;
$timeline-item-padding-bottom: 8px !default;
$timeline-image-dimensions: 16 24 32 48 64 96 128 !default;

.timeline {
  display: flex;
  flex-direction: column;


  .timeline-header {
    width: $timeline-header-width;
    min-width: $timeline-header-width;
    max-width: $timeline-header-width * 2;
    word-wrap: normal;
    text-align: center;
    display: flex;
    justify-content: center;
    margin-left: 0;
  }

  .timeline-item,
  .undone {
    display: flex;
    display: -ms-flexbox;
    display: -webkit-flex;
    position: relative;
    margin-left: 0;
    padding-bottom: $spacing-2;

    .icon {
      background-color: getColor('font');
    }

    &::before {
      content: '';
      background-color: getColor('disabled');
      display: block;
      width: $timeline-line-width;
      position: absolute;
      top: 43.89px;
      left: 3rem;
      bottom: 8px;
      height: auto;
    }

    &.active {
      .timeline-marker.is-icon {
        background-color: getColor('main');

        .icon {
          color: getColor('background') !important;
        }
      }

      .timeline-content {
        p.main-content {
          font-weight: 800;
        }
      }

      &::before {
        content: '';
        background-color: getColor('main');
        display: block;
        width: $timeline-line-width;
        position: absolute;
        top: 43.89px;
        left: 3rem;
        bottom: 8px;
        height: auto;
      }
    }

    &.done {
      .timeline-marker.is-icon {
        background-color: getColor('font');

        .icon {
          color: getColor('background') !important;
        }
      }

      &::before {
        content: '';
        background-color: getColor('font');
        display: block;
        width: $timeline-line-width;
        position: absolute;
        top: 43.89px;
        left: 3rem;
        bottom: 8px;
        height: auto;
      }
    }

    .timeline-marker {
      position: absolute;
      background: getBGColor('neutral-dark');
      border-radius: 100%;
      content: '';
      display: block;
      height: $timeline-marker-size;
      left: -($timeline-marker-size * 0.5 - $timeline-marker-border-size *
                        0.5);
      top: 0;
      width: $timeline-marker-size;
      margin-left: 30px;

      &.is-image {
        @each $dimension in $timeline-image-dimensions {
          &.is-#{$dimension}x#{$dimension} {
            height: $dimension * 1px;
            width: $dimension * 1px;
            left: $dimension * 0.5 * -1px;
          }
        }

        background: getBGColor('neutral-dark');
        border-radius: 100%;
        display: block;
        overflow: hidden;
      }

      &.is-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        height: $timeline-marker-icon-size;
        width: $timeline-marker-icon-size;
        left: -($timeline-marker-icon-size * 0.5 -
                            $timeline-marker-border-size * 0.5);
        line-height: size(0.75rem);
        padding: math.div($timeline-icon-size, 3);
        background: getBGColor('neutral');
        border-radius: 100%;

        > i {
          color: getColor('font');
          font-size: $timeline-icon-size !important;
        }
      }

      &.is-outlined {
        .image {
          background: getColor('background');
        }

        &.is-icon {
          background: getColor('background');

          > i {
            color: getBGColor('neutral-dark');
          }
        }
      }


    }

    .timeline-content {
      margin-left: 3.7em;
      padding: $spacing-3 0 $spacing-4 $spacing-4;

      .heading {
        font-size: $text-12;
        color: getColor('neutral');
        font-family: $family-sans-serif;
        text-transform: none;
        letter-spacing: 0;
        line-height: 15px;
        font-weight: 500;
        color: #707070;
      }

      p {
        margin-bottom: 4px;
      }
    }

    @each $name, $pair in $colors-brand-funcionnal {
      $color: getColor($name);
      $brandName: getColorBrandName($name);

      &.is-#{$brandName} {
        &::before {
          background-color: $color;
        }
      }
    }
  }

  &.is-centered {
    .timeline-header {
      display: flex;
      width: 100%;
      align-self: center;
    }

    .timeline-item {
      width: 50%;
      align-self: flex-end;

      &:nth-of-type(2n) {
        align-self: flex-start;
        margin-left: 0;
        margin-right: $timeline-header-width * 0.5;

        &::before {
          right: -$timeline-line-width;
          left: auto;
        }

        .timeline-marker {
          left: auto;
          right: -(
                            $timeline-marker-size * 0.5 -
                                $timeline-marker-border-size * 0.5
                        ) - $timeline-line-width;

          &.is-image {
            @each $dimension in $timeline-image-dimensions {
              &.is-#{$dimension}x#{$dimension} {
                left: auto;
                right: $dimension * 0.5 * -1px;
              }
            }
          }

          &.is-icon {
            left: auto;
            right: -(
                                $timeline-marker-icon-size * 0.5 -
                                    $timeline-marker-border-size * 0.5
                            ) - $timeline-line-width;
          }
        }

        .timeline-content {
          padding: $timeline-rtl-content-padding;
          text-align: right;
          display: flex;
          flex-direction: column;
          align-items: flex-end;
          flex-basis: 100%;
        }
      }

      &:nth-of-type(2n + 1) {
        &::before {
          content: '';
          background-color: getColor('disabled');
          display: block;
          width: $timeline-line-width;
          height: 100%;
          position: absolute;
          top: 0;
        }
      }

      @each $name, $pair in $colors-brand-funcionnal {
        $color: getColor($name);
        $color-invert: invertColor($name);
        $brandName: getColorBrandName($name);

        &.is-#{$brandName} {
          &::before {
            background-color: $color;
          }
        }
      }
    }
  }
}
