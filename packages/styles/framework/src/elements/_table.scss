@use "sass:math";

/**
* @deprecated "Use box.is-paddingless instead"
*/
.table-container.box {
  padding: 0;
}

.table {
  @include block;

  background-color: transparent;
  color: getColor('neutral');

  &:not(:last-child) {
    margin-bottom: 30px;
  }

  /**
  * @deprecated "Use multiples <tr><th> instead"
  */
  tbody .is-body-header {
    background-color: getColor('neutral-fade');
  }

  td,
  th {
    border: var(--border);
    border-width: 0;
    padding: 20px;
    vertical-align: top;
    text-align: left;

    // Modifiers
    &.is-narrow {
      white-space: nowrap;
      width: 1%;
    }

    &.is-selected {
      background-color: getColor('main');
      color: getColor('background');

      a,
      strong {
        color: currentColor;
      }
    }
  }

  th {
    color: getColor('font');
  }

  tr {
    @each $name in $colors-feedback {
      &.is-#{$name} {
        background-color: fadeColor($name);
      }
    }

    th {
      background-color: getColor('background');
    }

    th,
    td {
      color: getColor('font');
      vertical-align: middle;
    }

    td {
      border-bottom: var(--border);

      > p {
        margin: 0;
      }
    }

    &.is-selected {
      background-color: getColor('main');
      color: getColor('background');

      a,
      strong {
        color: currentColor;
      }

      td,
      th {
        color: currentColor;
      }
    }

    &.is-expanded,
    &.is-expandable:hover {
      td {
        color: getColor('accent');
        cursor: pointer;
      }
    }

    &.is-expandable + .is-expansion {
      display: none;
    }

    &.is-expanded + .is-expansion {
      display: table-row;
    }

    &.is-expanded {
      > td {
        border-bottom: 0;
      }

      .toggle {
        transform: rotate(180deg);
        color: inherit;
      }

      + tr > td {
        border-top: 0;
      }
    }
  }

  thead {
    td,
    th {
      border-width: 0 0 1px;
      color: getColor('font');
    }
  }

  tfoot {
    td,
    th {
      border-width: 2px 0 0;
      color: getColor('font');
    }
  }

  tbody {
    tr {
      &:last-child {
        td,
        th {
          border-bottom-width: 0;
        }
      }
    }
  }

  &.has-border-all {
    border: var(--border);

    th {
      border-right: var(--border);
    }

    td {
      &:not(:last-child) {
        border-right: var(--border);
      }
    }
  }

  &.has-border-inner {
    th {
      &:not(:last-child) {
        border-right: var(--border);
      }
    }

    td {
      &:not(:last-child) {
        border-right: var(--border);
      }
    }
  }

  &.is-compact {
    td,
    th {
      padding: math.div(20px, 3) math.div(20px, 3);
    }
  }

  &.is-fullwidth {
    width: 100%;
  }

  &.is-striped {
    tbody {
      tr:not(.is-selected) {
        &:nth-child(even) {
          background-color: getColor('neutral-fade');
        }
      }
    }
  }

  .subtable {
    background-color: getColor('neutral-fade');
    border-radius: var(--radius);
    padding: $box-padding * 2;

    @include mobile() {
      padding: 15px;
    }

    .table {
      background: transparent;

      tr:not(:first-child) {
        td {
          border-top: var(--border);
        }
      }

      td {
        border: 0;

        &:first-child {
          padding-left: 0;
        }

        &:last-child {
          padding-right: 0;
        }
      }
    }
  }
}

.table-container {
  @include block;
  @include overflow-touch;

  overflow: auto;
  overflow-y: hidden;
  max-width: 100%;
}
